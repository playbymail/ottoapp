// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth.sql

package sqlc

import (
	"context"
)

const createUserSecrets = `-- name: CreateUserSecrets :exec

INSERT INTO user_secrets (user_id,
                   hashed_password,
                   last_login)
VALUES (?1,
        ?2,
        ?3)
`

type CreateUserSecretsParams struct {
	UserID         int64
	HashedPassword string
	LastLogin      int64
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateUserSecrets creates a secrets record for the user.
// The password is stored as a bcrypt hash.
func (q *Queries) CreateUserSecrets(ctx context.Context, arg CreateUserSecretsParams) error {
	_, err := q.db.ExecContext(ctx, createUserSecrets, arg.UserID, arg.HashedPassword, arg.LastLogin)
	return err
}

const getUserSecrets = `-- name: GetUserSecrets :one
SELECT hashed_password
FROM user_secrets
WHERE user_id = ?1
`

// GetUserPassword returns the password for a user.
// The password is stored as a bcrypt hash.
func (q *Queries) GetUserSecrets(ctx context.Context, userID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserSecrets, userID)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user_secrets
SET hashed_password = ?1,
    updated_at      = CURRENT_TIMESTAMP
WHERE user_id = ?2
`

type UpdateUserPasswordParams struct {
	HashedPassword string
	UserID         int64
}

// UpdateUserPassword updates password for a user.
// The password is stored as a bcrypt hash.
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.UserID)
	return err
}
