// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (handle,
                   email,
                   timezone)
VALUES (?1,
        ?2,
        ?3)
RETURNING user_id
`

type CreateUserParams struct {
	Handle   string
	Email    string
	Timezone string
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateUser creates a new user and returns its id.
// The email must be lowercase and unique.
// Timezone is the user's timezone. Use UTC if unknown.
// The password is stored as a bcrypt hash.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Handle, arg.Email, arg.Timezone)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getUser = `-- name: GetUser :one
SELECT handle,
       email,
       timezone,
       created_at,
       updated_at
FROM users
WHERE user_id = ?1
`

type GetUserRow struct {
	Handle    string
	Email     string
	Timezone  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

// GetUserByID returns the user with the given id.
func (q *Queries) GetUser(ctx context.Context, userID int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.Handle,
		&i.Email,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT user_id
FROM users
WHERE email = ?1
`

// GetUserIDByEmail returns the id of the user with the given email address.
func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByEmail, email)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserIDByHandle = `-- name: GetUserIDByHandle :one
SELECT user_id
FROM users
WHERE handle = ?1
`

// GetUserIDByHandle returns the id of the user with the given handle.
func (q *Queries) GetUserIDByHandle(ctx context.Context, handle string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByHandle, handle)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET email      = ?1,
    handle     = ?2,
    timezone   = ?3,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?4
`

type UpdateUserParams struct {
	Email    string
	Handle   string
	Timezone string
	UserID   int64
}

// UpdateUser updates the given user.
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Handle,
		arg.Timezone,
		arg.UserID,
	)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE users
SET email      = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?2
`

type UpdateUserEmailParams struct {
	Email  string
	UserID int64
}

// UpdateUserEmail updates the email for the given user.
func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.UserID)
	return err
}

const updateUserHandle = `-- name: UpdateUserHandle :exec
UPDATE users
SET handle     = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?2
`

type UpdateUserHandleParams struct {
	Handle string
	UserID int64
}

// UpdateUserHandle updates the handle for the given user.
func (q *Queries) UpdateUserHandle(ctx context.Context, arg UpdateUserHandleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserHandle, arg.Handle, arg.UserID)
	return err
}

const updateUserTimezone = `-- name: UpdateUserTimezone :exec
UPDATE users
SET timezone   = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?2
`

type UpdateUserTimezoneParams struct {
	Timezone string
	UserID   int64
}

// UpdateUserTimezone updates the timezone for the given user.
func (q *Queries) UpdateUserTimezone(ctx context.Context, arg UpdateUserTimezoneParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTimezone, arg.Timezone, arg.UserID)
	return err
}
