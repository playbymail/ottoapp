// Copyright (c) 2025 Michael D Henderson. All rights reserved.

// Package main implements a tool to generate the list of IANA
// time zone names from the Go distribution's built-in zoneinfo.zip
// and writes them into the `backend/iana/normalize.go` file.
//
// Usage:
//
//	go run ./cmd/gentz
package main

import (
	"archive/zip"
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"runtime"
	"sort"
	"strings"
)

const outputFile = "backend/iana/normalize.go"

func main() {
	// note: runtime.GOROOT() is deprecated, but it works for our use case.
	zoneinfoPath := filepath.Join(runtime.GOROOT(), "lib", "time", "zoneinfo.zip")
	fmt.Printf("gentz:  input: %q\n", zoneinfoPath)
	fmt.Printf("gentz: output: %q\n", outputFile)

	data, err := os.ReadFile(zoneinfoPath)
	if err != nil {
		fmt.Printf("gentz: input: %v", err)
		os.Exit(1)
	}
	zr, err := zip.NewReader(bytes.NewReader(data), int64(len(data)))
	if err != nil {
		fmt.Printf("gentz: input: %v", err)
		os.Exit(1)
	}

	var zones []string
	for _, f := range zr.File {
		name := f.Name
		// skip junk / metadata files
		if strings.HasPrefix(name, "posix/") ||
			strings.HasPrefix(name, "right/") ||
			strings.Contains(name, "leapseconds") ||
			strings.Contains(name, "tzdata.zi") ||
			strings.HasPrefix(name, "Etc/") && !strings.HasPrefix(name, "Etc/GMT") {
			continue
		}
		if !strings.Contains(name, "/") {
			continue // skip root-level files like "UTC"
		}
		zones = append(zones, name)
	}

	sort.Strings(zones)

	var buf bytes.Buffer
	_, _ = fmt.Fprintf(&buf, "// Code generated by cmd/gentz; DO NOT EDIT.\n")
	_, _ = fmt.Fprintf(&buf, "\n")
	_, _ = fmt.Fprintf(&buf, "// package iana returns the normalized (canonical) name for a timezone\n")
	_, _ = fmt.Fprintf(&buf, "package iana\n")
	_, _ = fmt.Fprintf(&buf, "\n")
	_, _ = fmt.Fprintf(&buf, "import \"strings\"\n")
	_, _ = fmt.Fprintf(&buf, "\n")
	_, _ = fmt.Fprintf(&buf, "func CanonicalName(name string) (string, bool) {\n")
	_, _ = fmt.Fprintf(&buf, "\tname, ok := canonicalNames[strings.ToLower(name)]\n")
	_, _ = fmt.Fprintf(&buf, "\treturn name, ok\n")
	_, _ = fmt.Fprintf(&buf, "}\n")
	_, _ = fmt.Fprintf(&buf, "\n")
	_, _ = fmt.Fprintf(&buf, "func Normalize(name string) (string, bool) {\n")
	_, _ = fmt.Fprintf(&buf, "\treturn CanonicalName(name)\n")
	_, _ = fmt.Fprintf(&buf, "}\n")
	_, _ = fmt.Fprintf(&buf, "\n")
	_, _ = fmt.Fprintf(&buf, "var canonicalNames = map[string]string{\n")
	for _, z := range zones {
		_, _ = fmt.Fprintf(&buf, "\t%q: %q,\n", strings.ToLower(z), z)
	}
	_, _ = fmt.Fprintf(&buf, "}\n")

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Printf("gentz: formatting: %v", err)
		os.Exit(1)
	}

	if err = os.WriteFile(outputFile, formatted, 0644); err != nil {
		fmt.Printf("gentz: output: %v", err)
		os.Exit(1)
	}

	fmt.Printf("gentz: completed successfully\n")
}
